package com.siri.sort;

public class ShellSortTest {
	
   public void shellSort(int[]arr, int n) {
	  //arr: 정렬할 배열,  n: 데이터 수
	  //arr의 데이터 수 ==> 8개 가정!!
	   
	  for(int h=n/2; h>0;  h/=2 /*h=h/2*/) {//삽입정렬의 비교횟수를 줄여줄 수 있는 조건!!(4-정렬, 2-정렬, 1-정렬)
		  // 4-정렬: 4칸단위의 비교
		  // 2-정렬: 2칸단위의 비교
		  // 1-정렬: 1칸단위의 비교
		  // ===> 최대한 오름차순에 가깝게 만든 다음 삽입정렬을 시도!!
/*
arr [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7] 
    {8,   1,   4,   2,   7,   6,   3,   5}
    
<4-정렬>    
    ---                 ---                     [0]  - [4]
        ---                  ---                [1]  - [5]
             ----                ----           [2]  - [6]
                  ----                 ----     [3]  - [7]
                                                 j      i
                                               (i-h)

arr [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7] 
    {8,   1,   4,   2,   7,   6,   3,   5}                                               

    {7,   1,   4,   2,   8,   6,   3,   5}  j=0(8), i=4(7)                                                
    {7,   1,   4,   2,   8,   6,   3,   5}  j=1(1), i=5(6)                                               
    {7,   1,   3,   2,   8,   6,   4,   5}  j=2(4), i=6(3)                                             
    {7,   1,   3,   2,   8,   6,   4,   5}  j=3(2), i=7(5)                                             

======================================================== <4-정렬 끝>  
arr [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]   
    {7,   1,   3,   2,   8,   6,   4,   5}
    
<2-정렬>    
                                                                                                기준
    {3,   1,   7,   2,   8,   6,   4,   5}   j=0(7), i=2(3)
    {3,   1,   7,   2,   8,   6,   4,   5}   j=1(1), i=3(2)
    
    {3,   1,   7,   2,   8,   6,   4,   5}   j=0(3) j=2(7), i=4(8)
    ---       ---       ---                  
                                                
    {3,   1,   7,   2,   8,   6,   4,   5}   j=1(1) j=3(2), i=5(6)
         ---       ---       ---
         
    {3,   1,   7,   2,   8,   6,   4,   5}   j=0(3) j=2(7) j=4(8), i=6(4)
    ---       ---       ---       ---
    {3,   1,   7,   2,   8,   6,   8,   5}
    {3,   1,   7,   2,   7,   6,   8,   5}
    {3,   1,   4,   2,   7,   6,   8,   5}     
     0    1    2    3    4    5    6    7
     
    {3,   1,   4,   2,   7,   6,   8,   5}   j=1(1) j=3(2) j=5(6), i=7(5)
         ---       ---       ---       ---  
    {3,   1,   4,   2,   7,   5,   8,   6}                 
*/
		  
		  ///////////////삽입정렬시작/////////////////
		  for(int i=h; i<n; i++) {//h:4 --> i: 4, 5, 6, 7
			  int j;              //        j: 0, 1, 2, 3
			  
			                      //h:2 --> i: 2, 3, 4, 5, 6, 7
			                      //        j: 0, 1, 2, 3, 4, 5 
			                      //                 0  1  2  3
			                      //                       0  1
			  int base=arr[i];//7,6
			  for(j=i-h; j>=0 && arr[j] > base;  j-=h) {
				                                 //j= 0-4 = -4
		      //  j=4-4=0		  
				  arr[j+h]=arr[j];//===> SHIFT (이동)
				 //arr[0+4]
			  }
			  arr[j+h] = base;
			  //arr[-4+4] = base;
		  }
		  ///////////////삽입정렬끝/////////////////
	  } 
	   
   }//shellSort
	
   public static void main(String[] args) {
      ShellSortTest sst = new ShellSortTest();
      int[]su={8,   1,   4,   2,   7,   6,   3,   5};
         sst.shellSort(su, su.length);
      System.out.println("#셸정렬후 su배열");	     
         
      System.out.print("[");
         for (int i = 0; i < su.length; i++) {//0~7
  		  System.out.print(su[i]);
  		  if(i<su.length-1)System.out.print(", ");
  	   }
      System.out.println("]");         
              
   }//main
}




